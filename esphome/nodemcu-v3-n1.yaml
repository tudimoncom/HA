# -----------------------------------------------------------------------------
# NodeMCU v3 n1 + OLED SSD1306 128x64
#
# DATE: 2021-08-22
#
# OLED + BME280 use i2c on pins:
#   sda: D4 (GPIO?)
#   scl: D5 (GPIO?)
#
#  Отработка отфильтровывания значений сенсора пока uptime < 120s
#
# -----------------------------------------------------------------------------

esphome:
  name: nodemcu-v3-n1
  platform: ESP8266
  board: nodemcuv2

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: !secret ota_password_n1

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret hotspot_wifi_ssid_n1
    password: !secret hotspot_wifi_password_n1

globals:
   - id: my_filter_global_float
     type: float
     restore_value: no
     initial_value: '120.0'


# Get the time from Home Assistant to sync the onboard real-time clock.
time:
  - platform: homeassistant
    id: esptime

# Шрифты
font:
  - file: 'slkscr.ttf'
    id: font1
    size: 8

  - file: 'BebasNeue-Regular.ttf'
    id: font2
    size: 48

  - file: 'arial.ttf'
    id: font3
    size: 14
    
# Captive portal компонент ESPHome является резервным механизмом при подключении к сконфигурированной Wi - Fi не удается.
captive_portal:

# Example configuration entry
web_server:
  port: 80
#  auth:
#    username: admin
#    password: !secret web_server_password


# display
# Example configuration entry
i2c:
  sda: D4
  scl: D5
  scan: True

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    reset_pin: D0
    address: 0x3C
#    lambda: |-
#      #it.print(0, 0, id(font1), "Hello World!");
      
    lambda: |-
      // Print "dimon test nodeMCU" in top center.
      it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "dimon test nodeMCU");

      // Print time in HH:MM format
      it.strftime(0, 60, id(font2), TextAlign::BASELINE_LEFT, "%H:%M", id(esptime).now());

sensor:
  - platform: uptime
    name: "nodemcu-v3-n1 Uptime Sensor"
    id: uptime_sensor
    update_interval: 60s
#    filters:
#      - lambda: |-
#          if (x > my_filter_global_int) return x; else return {};
#    on_raw_value:
#      then:
#        - text_sensor.template.publish:
#            id: n1_test
#            state: id(uptime_sensor).raw_state
      
  - platform: wifi_signal
    name: "nodemcu-v3-n1 WiFi Signal"
    update_interval: 60s   
    
  - platform: template
    name: "nodemcu-v3-n1 test"
    id: n1_test
#    update_interval: 60s
#    filters:
#      - lambda: |-
#          if (x > 120) return x; else return {};
          
#          ESP_LOGD("main", "test value is: %d", x

  - platform: bme280
    temperature:
      name: "BME280 Temperature"
      id: bme280_temperature
      filters:
        - lambda: |-
            if (id(uptime_sensor).state > 600) return x; else return {};
    pressure:
      name: "BME280 Pressure"
      id: bme280_pressure
    humidity:
      name: "BME280 Relative Humidity"
      id: bme280_humidity
    address: 0x76
    update_interval: 60s